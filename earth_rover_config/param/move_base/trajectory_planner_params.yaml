### Trajectory planner parameters ###
# Used if "base_local_planner/TrajectoryPlannerROS" is selected in
# base_local_planner in move_base global params.
# load with the namespace "TrajectoryPlannerROS" in the launch file


## Robot Configuration Parameters ##

# The x acceleration limit of the robot in meters/sec^2
acc_lim_x: 2.0  # 2.5

# The y acceleration limit of the robot in meters/sec^2
acc_lim_y: 0.0  # 2.5

# The rotational acceleration limit of the robot in radians/sec^2
acc_lim_theta: 2.0  # 3.2

# The maximum x velocity for the robot in m/s.
max_vel_x: 0.55  # 0.55

# The minimum forward velocity allowed for the base in meters/sec
min_vel_x: 0.15  # 0.1

# The maximum rotational velocity allowed for the base in radians/sec
max_vel_theta: 1.5  # 1.0

# The minimum rotational velocity allowed for the base in radians/sec
min_vel_theta: -1.5  # -1.0

# The minimum rotational velocity allowed for the base while performing
# in-place rotations in radians/sec
min_in_place_vel_theta: 0.65

# Speed used for driving during escapes in meters/sec.
# Note that it must be negative in order for the robot to actually reverse.
# A positive speed will cause the robot to move forward while attempting to escape.
escape_vel: -0.1  # -0.1

# Determines whether velocity commands are generated for a holonomic or non-holonomic robot.
holonomic_robot: false

# The following parameters are only used if holonomic_robot is set to true:
# The strafing velocities that a holonomic robot will consider in meters/sec
# y_vels: [-0.3, -0.1, 0.1, 0.3]

## Goal Tolerance Parameters ##

# The tolerance in radians for the controller in yaw/rotation when achieving its goal
yaw_goal_tolerance: 0.05  # 0.05

# The tolerance in meters for the controller in the x & y distance when achieving a goal
xy_goal_tolerance: 0.05  # 0.1

# If goal tolerance is latched, if the robot ever reaches the goal xy location
# it will simply rotate in place, even if it ends up outside the goal
# tolerance while it is doing so.
latch_xy_goal_tolerance: false


## Forward Simulation Parameters ##

# The amount of time to forward-simulate trajectories in seconds
sim_time: 4.0  # 0.7

# The step size, in meters, to take between points on a given trajectory
sim_granularity: 0.025

# The step size, in radians, to take between angular samples on a given trajectory.
angular_sim_granularity: 0.025

# The number of samples to use when exploring the x velocity space
vx_samples: 3

# The number of samples to use when exploring the theta velocity space
vtheta_samples: 20

# The frequency at which this controller will be called in Hz.
# Overrides move_base's global controller_frequency parameter if set
# controller_frequency: 20.0


## Trajectory Scoring Parameters ##

# cost =
  # pdist_scale * (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter)
  # + gdist_scale * (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter)
  # + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

# Whether the gdist_scale and pdist_scale parameters should assume that
# goal_distance and path_distance are expressed in units of meters or cells.
# Cells are assumed by default.
meter_scoring: false

# The weighting for how much the controller should stay close to the path it
# was given, maximal possible value is 5.0
pdist_scale: 4.5

# The weighting for how much the controller should attempt to reach its local
# goal, also controls speed, maximal possible value is 5.0
gdist_scale: 2.5

# The weighting for how much the controller should attempt to avoid obstacles
occdist_scale: 0.01

# How far to look ahead in meters when scoring different in-place-rotation trajectories
heading_lookahead: 0.325

# Whether to score based on the robot's heading to the path or its distance from the path
heading_scoring: false

# How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
heading_scoring_timestep: 0.8

# Whether to use the Dynamic Window Approach (DWA) or whether to use Trajectory Rollout
dwa: true

# Whether or not to publish the cost grid that the planner will use when planning.
publish_cost_grid_pc: false

# The frame to set for the cost_cloud. Should be set to the same frame as the local costmap's global frame.
global_frame_id: odom

## Oscillation Prevention Parameters ##

# How far the robot must travel in meters before oscillation flags are reset
oscillation_reset_dist: 0.05

## Global Plan Parameters ##

# Defines whether or not to eat up the plan as the robot moves along the path.
# If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
prune_plan: true
